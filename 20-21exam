rm(list = ls())
library(randomForest)
library(class)
library(pROC)
library(e1071)
library(caret)
library(ISLR)
library(MASS)
library(nnet)
library(gbm)
library(glmnet)

dat=read.csv(file="C:/Users/121126606/Downloads/dodgysales1.csv",stringsAsFactors=TRUE)

n = nrow(dat)
set.seed(6041)
i.train = sample(1:n, floor(.7*n))
dat.train = dat[i.train,]
dat.validation = dat[-i.train,]

#(1)
View(dat)
#regression problem
#(2)
n=nrow(dat)
#p=n-1
#(3)

myscale <- function(x){
  if(!is.factor(x)){
    minx = min(x,na.rm=TRUE)
    maxx = max(x,na.rm=TRUE)
    xs=((x-minx)/(maxx-minx))
    #xs=(x-min(x))/(max(x)-min(x))
  }
  else{
    xs=x
  }
  return(xs)
}
dat.s=as.data.frame(lapply(dat,myscale))
summary(dat.s$Sales)

#dat=as.data.frame(dat)
#dat=myscale(dat)
#dat.s=as.data.frame(dat)
#summary(dat.s$Sales)

dat.s.train = dat.s[i.train,]
dat.s.validation = dat.s[-i.train,]

#par(mfrow=c(3,2))

set.seed(6041)
nn3=nnet(Sales~.,data=dat.s.train,size=3)
summary(dat.s$Sales)

set.seed(6041)
nn8=nnet(Sales~.,data=dat.s.train,size=8)
summary(dat.s$Sales)

mean(nn3$residuals^2)#MSE
mean(nn8$residuals^2)#MSE

ytest=dat.s.validation$Sales
p3=predict(nn3,dat.s.validation)
p8=predict(nn8,dat.s.validation)
mean((p3-ytest)^2)
mean((p8-ytest)^2)

nnControl=trainControl(method="cv",number=10)
#net.mod=nnet(Sales~.,data=dat.s.train,size=10, decay=c(3,8), linout=1)
#summary(net.mod)
nno=train(Sales~.,data=dat.s.train,method="nnet",trControl=nnControl)
names(nno)
nno$bestTune
nno.fit=predict(nno,dat.s.train)
nno.res=nno.fit-dat.s.train$Sales
mean(nno.res^2)
po=predict(nno,dat.s.validation)
mean((po-ytest)^2)

#gradient boosting model
set.seed(6041)
gbmo=gbm(Sales~.,data=dat.train,distribution="gaussian",n.trees=100)
gbmp=predict(gbmo,data=dat.validation)
mean((gbmp-dat.validation$Sales)^2)
mean((gbmo$fit-dat.train$Sales)^2)

#glm
set.seed(6041)
glmo=glm(Sales~.,data=dat.train,family="gaussian")
glmp=predict(glmo,data=dat.validation)
mean((glmp-dat.validation$Sales)^2)
mean((glmo$fit-dat.train$Sales)^2)

#ridge
set.seed(6041)
xm=model.matrix(Sales~.+0,data=dat.train)
y=dat.train$Sales
ridge=glmnet(xm,y,alpha=0,lambda=0.915)
ridge.fit=predict(ridge,xm)
xmv=model.matrix(Sales~.+0,data=dat.validation)
ridgep=predict(ridge,xmv)
mean((ridge.fit-y)^2)
mean((ridgep-dat.validation$Sales)^2)
